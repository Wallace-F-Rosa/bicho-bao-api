// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PersonIdentifier {
  id     Int     @id @default(autoincrement())
  use    String
  type   String
  value  String  @unique
  person Person?
}

model Address {
  use          String
  type         String
  line         String
  city         String
  district     String
  state        String
  postalCode   String
  country      String
  personId     Int
  person       Person    @relation(fields: [personId], references: [id])
  period_start DateTime?
  period_end   DateTime?

  @@id([personId, line, postalCode])
}

model HumanName {
  id       Int     @id @default(autoincrement())
  use      String
  text     String
  family   String
  personId Int     @unique
  person   Person? @relation

  @@unique([personId, text])
}

model ContactPoint {
  system    String
  value     String
  use       String
  personId  Int
  contactOf Person @relation(fields: [personId], references: [id])

  @@id([personId, value])
}

model Attachment {
  id          Int     @id @default(autoincrement())
  contentType String
  url         String
  personId    Int?
  person      Person? @relation

  @@unique([personId, url])
}

model Communication {
  id       Int      @id @default(autoincrement())
  language String   @unique
  speakers Person[]
}

model Person {
  id            Int              @id @default(autoincrement())
  identifierId  Int              @unique
  identifier    PersonIdentifier @relation(fields: [identifierId], references: [id])
  active        Boolean
  nameId        Int              @unique
  name          HumanName        @relation(fields: [nameId], references: [id])
  telecom       ContactPoint[]   @relation
  gender        String
  birthDate     DateTime?
  photoId       Int?             @unique
  photo         Attachment?      @relation(fields: [photoId], references: [id])
  addresses     Address[]
  communication Communication[]
  userId        Int              @unique
  user          User             @relation(fields: [userId], references: [id])
}

model Permission {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String
  roles       Role[]
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String
  permissions Permission[]
  users       User[]
}

model User {
  id           Int     @id @default(autoincrement())
  email        String  @unique
  username     String
  passwordHash String
  personalData Person?
  roles        Role[]
}
